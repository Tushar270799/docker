INDEX
1) architecture of container
2)  Step-by-Step Docker Installation on Ubuntu 20.04.6
3) basic docker command and concepts (CONTAINER INFO, CONTAINER IMAGE LISTING, CONTAINER REMOVE, start container, stop container, detach container, interactive tty to run command, exit container keeping container in running condition)
4) pull image from docker hub
5) delete all container including started and stopped.
6) Inspect docker container.
7) command to get container logs h
8) command to get running processes inside container
9) proof of container is not vm, host kernal which running process not seperate kernal use by container
10) command to get CPU and RAM usage of all containers on host:
11) port forwarding
12) define name to container
13) Take bash on existing running container
14) rename container
15) restart container
16) Attatch to running container
17) kill container
18) wait command (use to get container exit code after container changed from running state )
19 ) pause and unpause  container (It will pause entire container)
21) know my contianer port map on which port of host interface
22) create container means container will create and remain is stopped state , run means container create and run
23) diff docker container ( use to see change in container files )
24) copy host machine file to container.
25) export to tar file, Import to image, docker container.
26) create docker image from running container.
27) docker image tag
28) docker login
29) push image to docker hub
30) combined command related to images
31) save and load docker image 
32) Dockerfile
33) DOCKERFILE : Label, run, env, workdir
34) ENV  variable
35) NOTE : below activity shows that each command is run from home directory of user if on seperate line.
36) Below observation if single RUN includes multiple command then one will execute after other because of execution with same shell.
37) WORKDIR - use of workdir is we can suggest working directory for all next command that will run.
38) USER command use in Dockerfile:




----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) architecture of container
windows os > hypervisor > guest os > docker > (lib only mandatory for app1, app1)
                                            > (lib only mandatory for app2, app2
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)  Step-by-Step Docker Installation on Ubuntu 20.04.6

Step 1: Uninstall old versions (if any)
sudo apt-get remove docker docker-engine docker.io containerd runc

Step 2: Update APT & install prerequisites
sudo apt-get update

sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release -y

Step 3: Add Docker's official GPG key
sudo mkdir -p /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Step 4: Set up the Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) \
  signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Step 5: Update package index again
sudo apt-get update

Step 6: Install Docker Engine, CLI, and containerd
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

 Step 7: Verify Docker installation
sudo docker --version
sudo docker run hello-world

Optional: Run Docker as non-root user
sudo usermod -aG docker $USER
newgrp docker
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) basic docker command and concepts

docker info # give container state details summary
docker version # give docker server and client info.
docker container ls # list running containers
docker image ls # view local images
docker container run ubuntu cat /etc/os-release # create and start docker container and run cat /etc/os-release command inside container.
docker container ls -a # list all container including stopped container.
docker container rm 4494538c3257 # remove docker container using CONTAINER ID 
docker container rm adoring_lewin # remove docker container using NAMES
docker container rm -f d548cedaa430 # remove rinning docker container using CONTAINER ID
NOTE: INSTEAD OF MENTIONING COMPLETE CONTAINER ID WE CAN MENTION ONLY FIRST UNIQUE STRING
NOTE: WE CAN PASS MULTIPE ID IN ARGUMENT TO REMOVE CONTAINER
docker container start 2deda78fa093 # start stopped container using CONTAINER ID

demo of container stop assumption after starting container it will take 30s to stop and it stop before that because of stop command :
date ; docker container start 2deda78fa093 ; docker container stop 2deda78fa093 ; date
Tue 17 Jun 2025 10:48:11 AM UTC
2deda78fa093
2deda78fa093
Tue 17 Jun 2025 10:48:22 AM UTC

docker container run -d ubuntu sleep 30s  # detach container in background

root@docker:~# docker container run -it ubuntu /bin/bash # run container and execute command inside container
root@a1780970451b:/#

exit container keeping container in running condition:
root@docker:~# docker container run -it ubuntu /bin/bash #run docker container and get interactive terminal of container
root@2984b9f6a684:/#  # press control+p+q to exit by keep contaner running
root@2984b9f6a684:/# root@docker:~#

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) pull image from docker hub
root@docker:~# docker container run nginx   # docker engine first find image locally
Unable to find image 'nginx:latest' locally # if image not available locally
latest: Pulling from library/nginx          # pulling image from docker hub

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) delete all container including started and stopped.

method 1:
docker container rm -f $(docker container ls -aq) # get container id of all listed command and remove all start stopped container

method 2: ( In case of one contaner) with this linux cli method we required much modification.
docker container rm $(docker container ls -a | awk '{print $1}' | tail -n 1)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6) Inspect docker container.
purpose is to get container information like ip address

docker container inspect d00799fd2023
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7) command to get container logs 
docker container logs d00

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8) command to get running processes inside container
docker container top d00
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9) proof of container is not vm, host kernal which running process not seperate kernal use by container

ps -aux | grep 1677
And it showed:

docker container top d00
root  1677  ... nginx: master process ...
That same PID was returned by:
docker container top d00
➡️ That means nginx inside the container is not running on a separate OS (VM) — it's a host process with namespace-based isolation.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
10) command to get CPU and RAM usage of all containers on host:
docker container stats
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
11) port forwarding

any request with url - http://192.168.1.100:443 with land on port 80 of container
docker container run -d -p 443:80 nginx

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
12) define name to container

docker container run -d --name nginx-container nginx
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
13) Take bash on existing running container

docker container exec -it d9a143b3bd66 /bin/bash
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
14) rename container

docker container rename nginx-container nginx-container-rename
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
15) restart container

docker container restart 7ad91c47765d
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
16) Attatch to running container

Attatch to running container ( To check attach container, i did this container access on host machine port 443, and i can see access log in below command  )
docker container attach 7a
192.168.1.3 - - [17/Jun/2025:14:32:26 +0000] "GET / HTTP/1.1" 304 0 "-" "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36" "-"

ANOTHER EX:
docker container run -itd ubuntu /bin/bash
0a454504c0a29797acb962c4973b9034ff2c053d42127dad740f03d976e3bafa
docker container attach 0a
root@0a454504c0a2:/#

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
17) kill container (stop container suddenly)
docker container kill d272096d44c8
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
18) wait command (use to get container exit code after container changed from running state )
docker container wait d2 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
19 ) pause and unpause  container (It will pause entire container)
docker container pause 67
docker container unpause 67

NOTE: ( simple scenario for understanding , launch nginx container with port forwarding from vm network to docker network, pause container, check url on browser you will get no response,
now unpause contianer you will see nginx welcome page )
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
20) prune container (Remove stopped container)
docker container prune  # this command will ask before removing stopped container
docker container prune -f # This command will not ask before removing stopped container, prune command will not remove running container.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
21) know my contianer port map on which port of host interface

docker container port ea
80/tcp -> 0.0.0.0:8088
80/tcp -> [::]:8088
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
22) create container means container will create and remain is stopped state , run means container create and run

docker container create ubuntu sleep 60
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
23) diff docker container ( use to see change in container files )
NOTE : Changed file after creating container will store in container file system
NOTE : all file along with container will remain in image file system.

root@docker:~# docker container diff 85
root@docker:~#
NOTE : no change in file in ubuntu container hence no output return.

| Marker | Meaning                                                               |
| ------ | --------------------------------------------------------------------- |
| `A`    | **Added** — A file or directory was added.                            |
| `C`    | **Changed** — A file or directory was modified (content or metadata). |
| `D`    | **Deleted** — A file or directory was deleted.                        |


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
24) copy host machine file to container.
docker container cp git/ da38e70f92b0:/tmp/
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
25) export to tar file, Import to image, docker container.
export container to tar file

NOTE : volume mount in container will not stored in tar file created during container export

root@docker:~# docker container export 66 > myubuntu_tree_git.tar
root@docker:~# docker container export 66 -o myubuntu_tree_gito.tar

Now tar file will restore as image on host machine.
docker image import myubuntu_tree_gito.tar my_image_ubuntu_git_tr  

NOTE : Now we can run container from image on host.
NOTE : Observation installed pkg and changes remain intact.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
26) create docker image from running container.
root@docker:~# docker container commit --author "Tushar Sonawane" -m "this is test commit" c88 my-testimage

NOw we can run container from this image in both cases we will get files and packages inside container or (WE CAN GET SNAPSHOT)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
27) docker image tag

dockerhub url - hub.docker.com
dockerhub username - tushar27799
password - Kalyan123tush@r

docker image tag my_image_ubuntu_git_tree tushar27799/my_image_ubuntu_git_tree_taggedtwice
or 
docker tag d53a2cb28d18 tushar27799/my_image_ubuntu_git_tree_taggedtwice:latest

NOTE: below are observations, tagged image have same image id as original image.

my_image_ubuntu_git_tree                           latest    d53a2cb28d18   16 hours ago   210MB
tushar27799/my_image_ubuntu_git_tree_tagged        latest    d53a2cb28d18   16 hours ago   210MB
tushar27799/my_image_ubuntu_git_tree_taggedtwice   latest    d53a2cb28d18   16 hours ago   210MB

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

28) docker login

root@docker:~# docker login -u tushar27799

i Info → A Personal Access Token (PAT) can be used instead.
         To create a PAT, visit https://app.docker.com/settings


Password:

WARNING! Your credentials are stored unencrypted in '/root/.docker/config.json'.
Configure a credential helper to remove this warning. See
https://docs.docker.com/go/credential-store/

Login Succeeded
root@docker:~#

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
29) push image to docker hub
docker push tushar27799/my_image_ubuntu_git_tree_taggedtwice
docker image push tushar27799/my_image_ubuntu_git_tree_taggedtwice
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
30) combined command related to images
docker image ls # list images on host
docker image ls --format '{{.ID}} {{.Repository}}' # command to get image ID and Repository

| **Placeholder** | **Description**                          |
| --------------- | ---------------------------------------- |
| `.ID`           | Image ID                                 |
| `.Repository`   | Image repository                         |
| `.Tag`          | Image tag                                |
| `.Digest`       | Image digest                             |
| `.CreatedSince` | Elapsed time since the image was created |
| `.CreatedAt`    | Time when the image was created          |
| `.Size`         | Image disk size                          |

docker image history ubuntu #Image histroy
docker image rm -f ubuntu # remove image used by container
docker rmi -f ubuntu

docker image rm  ubuntu # remove image not used by any container
docker rmi ubuntu

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
31) save and load docker image 

Note : if we have multiple image of same name with different tag and if we forgot to mention specific image tag then it will make tar of all images together.

docker image save nginx -o nginx.tar
docker image load < nginx.tar

example:
docker image save ubuntu:latest -o latest.tar
docker image save ubuntu:22.04 -o 22.tar
docker image save ubuntu -o combine.tar

du -sh 22.tar latest.tar combine.tar
77M     22.tar
77M     latest.tar
154M    combine.tar

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
32) Layered architeccture and docker file

naming conventione : Dockerfile

echo "FROM ubuntu:22.04" > Dockerfile

NOTE : From parameter can be small and Capital both will work.
NOTE : Command to build image from dockerfile, dot represent Dockerfile in current directory
docker image build -t myubuntu:1 .

NOET : always put new modification in docker file at end so that it can read all previously done thing from cache and only focus on new things.
NOTE : image build from Dockerfile will generally get id of latest layer builded.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

33) DOCKERFILE : Label, run, env, workdir

LABEL:
information for image

vi Dockerfile
LABEL name="Tushar Sonawane"
LABEL email="sonawane.tushar.work@gmail.com"

docker image build -t myubuntu:4 .

docker image inspect myubuntu:4 | less
...
...
...
   "Labels": {
                "email": "sonawane.tushar.work@gmail.com",
                "name": "Tushar Sonawane",
                "org.opencontainers.image.ref.name": "ubuntu",
                "org.opencontainers.image.version": "22.04"
...
...
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
34) ENV  variable

1. root@docker:~/Dockerfiles# vi Dockerfile 
...
...
ENV NAME=tushar
ENV PASS=password 
...
...

2. root@docker:~/Dockerfiles# docker image build -t myubuntu:6 .

3. root@docker:~/Dockerfiles# docker image ls
myubuntu                                                          6         b8d1ce5866fb   3 days ago     143MB

4. root@docker:~/Dockerfiles# docker container run -it myubuntu:6 /bin/bash

5. root@10325b9718d6:/# env
...
...
NAME=tushar
PASS=password
...
...

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

35) NOTE : below activity shows that each command is run from home directory of user if on seperate line.
1. root@docker:~/Dockerfiles# vi Dockerfile 
...
...
RUN pwd>/tmp/root.txt
RUN cd /tmp
RUN pwd>/tmp/tmp.txt
...
...

2. root@docker:~/Dockerfiles# docker image build -t myubuntu:7 .

3. root@docker:~/Dockerfiles# docker container run -it myubuntu:7 /bin/bash

4. root@1490c727cc1d:/# cd /tmp
root@1490c727cc1d:/tmp# cat root.txt 
/
root@1490c727cc1d:/tmp# cat tmp.txt 
/

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
36) Below observation if single RUN includes multiple command then one will execute after other because of execution with same shell.

1. root@docker:~/Dockerfiles# vi Dockerfile 
...
...
RUN cd /tmp ; pwd>/tmp/tmp.txt
...
...

2. root@docker:~/Dockerfiles# docker image build -t myubuntu:8 .

3. root@docker:~/Dockerfiles# docker container run -it myubuntu:8 /bin/bash

4. root@f2f1c628fe29:/# cd /tmp
root@f2f1c628fe29:/tmp# cat root.txt 
/
root@f2f1c628fe29:/tmp# cat tmp.txt 
/tmp

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
37) WORKDIR - use of workdir is we can suggest working directory for all next command that will run after workdir parameter.
NOTE : workdir will set working directory when we enter into container

1. root@docker:~/Dockerfiles# vi Dockerfile 
...
...
WORKDIR /etc
RUN pwd>/tmp/etc.txt
...
...

2. root@docker:~/Dockerfiles# docker image build -t myubuntu:9 .

3. root@docker:~/Dockerfiles# docker container run -it myubuntu:9 /bin/bash

4. root@667cea563b77:/etc# cd /tmp
root@667cea563b77:/tmp# cat etc.txt 
/etc

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
38) USER command use in Dockerfile:
USER ${NAME} #use to switch user in dockerfile
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


