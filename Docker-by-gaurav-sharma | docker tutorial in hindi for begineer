INDEX
1) architecture of container
2)  Step-by-Step Docker Installation on Ubuntu 20.04.6
3) basic docker command and concepts (CONTAINER INFO, CONTAINER IMAGE LISTING, CONTAINER REMOVE, start container, stop container, detach container, interactive tty to run command, exit container keeping container in running condition)
4) pull image from docker hub
5) delete all container including started and stopped.
6) Inspect docker container.
7) command to get container logs 
8) command to get running processes inside container
9) proof of container is not vm, host kernal which running process not seperate kernal use by container

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1) architecture of container
windows os > hypervisor > guest os > docker > (lib only mandatory for app1, app1)
                                            > (lib only mandatory for app2, app2
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2)  Step-by-Step Docker Installation on Ubuntu 20.04.6

Step 1: Uninstall old versions (if any)
sudo apt-get remove docker docker-engine docker.io containerd runc

Step 2: Update APT & install prerequisites
sudo apt-get update

sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release -y

Step 3: Add Docker's official GPG key
sudo mkdir -p /etc/apt/keyrings

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | \
sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

Step 4: Set up the Docker repository
echo \
  "deb [arch=$(dpkg --print-architecture) \
  signed-by=/etc/apt/keyrings/docker.gpg] \
  https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

Step 5: Update package index again
sudo apt-get update

Step 6: Install Docker Engine, CLI, and containerd
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y

 Step 7: Verify Docker installation
sudo docker --version
sudo docker run hello-world

Optional: Run Docker as non-root user
sudo usermod -aG docker $USER
newgrp docker
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3) basic docker command and concepts

docker info # give container state details summary
docker version # give docker server and client info.
docker container ls # list running containers
docker image ls # view local images
docker container run ubuntu cat /etc/os-release # create and start docker container and run cat /etc/os-release command inside container.
docker container ls -a # list all container including stopped container.
docker container rm 4494538c3257 # remove docker container using CONTAINER ID 
docker container rm adoring_lewin # remove docker container using NAMES
docker container rm -f d548cedaa430 # remove rinning docker container using CONTAINER ID
NOTE: INSTEAD OF MENTIONING COMPLETE CONTAINER ID WE CAN MENTION ONLY FIRST UNIQUE STRING
NOTE: WE CAN PASS MULTIPE ID IN ARGUMENT TO REMOVE CONTAINER
docker container start 2deda78fa093 # start stopped container using CONTAINER ID

demo of container stop assumption after starting container it will take 30s to stop and it stop before that because of stop command :
date ; docker container start 2deda78fa093 ; docker container stop 2deda78fa093 ; date
Tue 17 Jun 2025 10:48:11 AM UTC
2deda78fa093
2deda78fa093
Tue 17 Jun 2025 10:48:22 AM UTC

docker container run -d ubuntu sleep 30s  # detach container in background

root@docker:~# docker container run -it ubuntu /bin/bash # run container and execute command inside container
root@a1780970451b:/#

exit container keeping container in running condition:
root@docker:~# docker container run -it ubuntu /bin/bash #run docker container and get interactive terminal of container
root@2984b9f6a684:/#  # press control+p+q to exit by keep contaner running
root@2984b9f6a684:/# root@docker:~#

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4) pull image from docker hub
root@docker:~# docker container run nginx   # docker engine first find image locally
Unable to find image 'nginx:latest' locally # if image not available locally
latest: Pulling from library/nginx          # pulling image from docker hub

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5) delete all container including started and stopped.

method 1:
docker container rm -f $(docker container ls -aq) # get container id of all listed command and remove all start stopped container

method 2: ( In case of one contaner) with this linux cli method we required much modification.
docker container rm $(docker container ls -a | awk '{print $1}' | tail -n 1)
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6) Inspect docker container.
purpose is to get container information like ip address

docker container inspect d00799fd2023
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
7) command to get container logs 
docker container logs d00

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
8) command to get running processes inside container
docker container top d00
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
9) proof of container is not vm, host kernal which running process not seperate kernal use by container

ps -aux | grep 1677
And it showed:

docker container top d00
root  1677  ... nginx: master process ...
That same PID was returned by:
docker container top d00
➡️ That means nginx inside the container is not running on a separate OS (VM) — it's a host process with namespace-based isolation.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
